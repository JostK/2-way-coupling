!!\chapter{Dynamic Dispatching}
!!\label{cap:Dynamic Dispatching}
!!
!!\lettrine[lines=2,loversize=-.1,lraise=0.2]{{\bf F}}{ortran} is not an \MaiuscolettoBS{object oriented} (OOp) programming
!!language. It is a procedural language with some of the the goals (ineritance, user-definited data type, polimorphism...)
!!of OOp. Fortran most important aim is to ensure the performance of the code not its \virgo{friendliness}... Despite its
!!nature, fortran 90/95 makes avaible some interesting features: it permits the dynamic dispatching of functions and
!!subroutine ensuring the best performance. This goal is achived with use of $interface$ construct. In the \LIBVTKIO there are,
!!at today, 4 interface blocks:
!!
!!\begin{boxred}{\LIBVTKIO Interface Blocks}
!!\begin{verbatim}
!!interface VTK_GEO
!!  module procedure VTK_GEO_UNST_R8, &
!!                   VTK_GEO_UNST_R4, &
!!                   VTK_GEO_STRP_R8, &
!!                   VTK_GEO_STRP_R4, &
!!                   VTK_GEO_STRG_R8, &
!!                   VTK_GEO_STRG_R4, &
!!                   VTK_GEO_RECT_R8, &
!!                   VTK_GEO_RECT_R4
!!endinterface
!!
!!interface VTK_VAR
!!  module procedure VTK_VAR_SCAL_R8, &
!!                   VTK_VAR_SCAL_R4, &
!!                   VTK_VAR_SCAL_I4, &
!!                   VTK_VAR_VECT_R8, &
!!                   VTK_VAR_VECT_R4, &
!!                   VTK_VAR_VECT_I4, &
!!                   VTK_VAR_TEXT_R8, &
!!                   VTK_VAR_TEXT_R4
!!endinterface
!!
!!interface VTK_GEO_XML
!!  module procedure VTK_GEO_XML_STRG_R4, &
!!                   VTK_GEO_XML_STRG_R8, &
!!                   VTK_GEO_XML_RECT_R8, &
!!                   VTK_GEO_XML_RECT_R4, &
!!                   VTK_GEO_XML_UNST_R8, &
!!                   VTK_GEO_XML_UNST_R4, &
!!                   VTK_GEO_XML_CLOSEP
!!endinterface
!!
!!interface VTK_VAR_XML
!!  module procedure VTK_VAR_XML_SCAL_R8, &
!!                   VTK_VAR_XML_SCAL_R4, &
!!                   VTK_VAR_XML_SCAL_I8, &
!!                   VTK_VAR_XML_SCAL_I4, &
!!                   VTK_VAR_XML_SCAL_I2, &
!!                   VTK_VAR_XML_SCAL_I1, &
!!                   VTK_VAR_XML_VECT_R8, &
!!                   VTK_VAR_XML_VECT_R4, &
!!                   VTK_VAR_XML_VECT_I8, &
!!                   VTK_VAR_XML_VECT_I4, &
!!                   VTK_VAR_XML_VECT_I2, &
!!                   VTK_VAR_XML_VECT_I1
!!endinterface
!!\end{verbatim}
!!\end{boxred}
!!
!!By the interface construct \LIBVTKIO has a more simple API. The user deals with a few functions without non-sense-long-name...
!!Dynamic dispatching is not the magic wand to solve all problems but it is an useful tool to simplify the code API. It is
!!not powerful as the C++ template, but it is a \MaiuscolettoBS{quantum-leap} for fortran programmers.