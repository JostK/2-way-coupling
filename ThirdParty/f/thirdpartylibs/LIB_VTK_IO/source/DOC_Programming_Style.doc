!!\chapter{LIB\_VTK\_IO Programming Style}
!!\label{cap:Programming Style}
!!
!!\lettrine[lines=2,loversize=-.1,lraise=0.2]{{\bf A}}{ll} the \LIBVTKIO functions are \MaiuscolettoBS{4-byte integer functions}:
!!the output of these functions is an integer that is $0$ if the function calling has been done right while it is $> 0$  if some
!!errors occur (the error handling is only at its embryonal phase). Therefore the functions calling must be done in the following
!!way:
!!
!!\begin{boxred}{Functions Calling}
!!\begin{verbatim}
!!...
!!integer(4):: E_IO
!!...
!!E_IO = VTK_INI(....
!!...
!!\end{verbatim}
!!\end{boxred}
!!
!!The \LIBVTKIO programming style is based on two main principles: \MaiuscolettoBS{portable kind-precision} of reals and integers
!!variables and \MaiuscolettoBS{dynamic dispatching}. In the appendix \ref{cap:kind precision} and \ref{cap:Dynamic Dispatching}
!!there are more details about these choices. I just remark some consequences of these choices. Using \MaiuscolettoBS{dynamic
!!dispatching} the \LIBVTKIO has a simple API. The user calls a generic procedure (VTK\_INI, VTK\_GEO,...) and the library,
!!depending on the type of the inputs passed, calls the correct internal function (i.e. VTK\_GEO for 8-byte real type if the input
!!passed is 8-byte real type). By this interface only few functions are used whitout the necessity of calling a different function
!!for every different inputs type. \MaiuscolettoBS{Dynamic dispatching} is valid also for the different kind of topology and
!!variables-data-dimensions; the function VTK\_GEO is the same for all topologies, just the inputs passed to the functions change
!!as the topology changes. Also the dimensions of variables-data use the \MaiuscolettoBS{dynamic dispatching}: the function
!!(VTK\_VAR) used to save vectorial data is identical to the one used for scalar data, depending on the dimensions of the data
!!\LIBVTKIO calls the correct internal function. \MaiuscolettoBS{Dynamic dispatching} is based on the internal kind-precision
!!selecting convention: Fortran 90/95 standard has some useful functions to achive the portability of reals and integers precision
!!and \LIBVTKIO uses these functions to define portable kind-precision; because it is important to make portable the code on
!!different architectures I suggest to use this programming style.
!!
!!The data handled by \LIBVTKIO can be classified into two main categories:
!!
!!\begin{enumerate1Red}
!!\item Geometric Data. These are the geometric informations of the mesh and they can be of different kind and different number
!!      depending on the topology choiced. The mesh points coordinates type must be of 4-byte real type or 8-byte real type.
!!\item Variable Data. These are the scalar or vectorial variables appended to the mesh points (both at the cell-nodes and the
!!      cell-centers of the mesh). The type of these data can be of 8-byte real type, 4-byte real type and 4-byte integer type
!!      (for the XML output there are also the 8-byte integer type, 2-byte integer type and 1-byte integer type).
!!\end{enumerate1Red}
!!
!!In the following chapters theare the details of \LIBVTKIO API.